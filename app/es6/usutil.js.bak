
let data=[
    {name:'uday' ,age:40,location:'Siphal',dob:'1998-07-20',child:{active:'Y'}},
    {name:'uday' ,age:20,location:'Anamnagar',dob:'1998-07-23'},
    {name:'uday' ,age:35,location:'Bnamnagar',dob:'1998-06-23'},
    {name:'aradhya' ,age:15,location:'cnamnagar',dob:'1998-08-23'},
    {name:'uday' ,age:15,location:'cnamnagar',dob:'1998-08-23'},
    {name:'sabita' ,age:30,location:'Heauta',dob:'2000-03-23'},
]
let _=require('underscore');
field.match(/^(max|min|avg|count)\((\w+)\) as (\w+)/i);
field.match(/^(\w+) as (\w+)/i);


class USUtil{
    constructor(){
        this.reset();
    }
    getField(field){
        field=field.trim();
        let method_alias_regx=field.match(/^(max|min|avg|count)\((\w+)\) as (\w+)/i);
        let method_regx=field.match(/^(max|min|avg|count)\((\w+)\)/i);
        let alias_regex=field.match(/^(\w+) as (\w+)/i);
        output={method:'',field_name:'',alias_name:''}
        if(method_alias_regx!==null){
            output.method=method_alias_regx[1].toLowerCase();
            output.field_name=method_alias_regx[2];
            output.alias_name=method_alias_regx[3];
        }else if(method_regx!==null){
            output.method=method_regx[1].toLowerCase();
            output.field_name=method_regx[2];
            output.alias_name=method_regx[2];
        }else if(alias_regex!==null){
            output.field_name=alias_regex[1];
            output.alias_name=alias_regex[2];
        }else{
            output.field_name=field;
            output.alias_name=field;
        }

        return output;

    }
    reset(){
        this.data=[];
        this.columns=[];
        this.contition=[];
        this.order=[];
        this._sum=[];
        this._max=[];
        this._min=[];
        this._count=[];
        this._avg=[];
    }
    from(data){
        this.data=data;
        return this;
    }
    select(fields){
        this.reset();
        if(fields=='*')
            this.columns='*';
        else
            this.columns=fields.split(',');
        return this;
    }
    where(k,oper,v){
        this.contition.push({k:k,oper:oper,v:v});
        return this;
    }
    orderby(k,type='asc'){
        this.order.push({k:k,direction:type});
        return this;
    }
    sum(k){
        this._sum.push(k);
        return this;
    }
    count(k){
        this._count.push(k);
        return this;
    }
    max(k){
        this._max.push(k);
        return this;
    }
    min(k){
        this._min.push(k);
        return this;
    }
    avg(k){
        this._avg.push(k);
        return this;
    }
    _setColumns(){
if(this._count.length>0){
    let output={};
    this.data.forEach(row=>{
        this._count.forEach(rc=>{
        let k=row['name'];
        if(!output.hasOwnProperty(rc)){
            output[k]=row;
            output[k][rc+'_count']=0;
        }
        output[k][rc+'_count']+=1;

    });


    });

    console.log(output);


}
        this.data=this.data.map(r=>{
                let selected_fields={};
                if(this.columns=='*')
                    selected_fields=r;
                else{
                    selected_fields={};
                    this.columns.forEach(col=>{
                        col=col.trim();
                    if(r.hasOwnProperty(col))
                        selected_fields[col]=r[col];
                });

                }
                return selected_fields;
            });
        //console.log('Set Columns:',this.data,'\n ----------------');

        return this;
    }

    _setOrderBy(){
        let data=this.data;
        if(this.order.length>0){
            data=data.sort((r_a,r_b)=>{

                    for(let i=0;i<this.order.length;i++)
            {
                let order=this.order[i];
                let or_a = r_a[order.k];
                let or_b = r_b[order.k];
                if (or_a == '')
                    or_a = '';
                if (or_b == '')
                    or_b = '';
                if (or_a > 0) {
                    //int
                } else {
                    or_a = or_a.toString().toLowerCase();
                    or_b = or_b.toString().toLowerCase();
                }
                if (order.direction == 'desc') {
                    return or_a < or_b;
                } else {
                    return or_a > or_b;
                }
            }


        })
        }
        this.data=data;
       // console.log('Order By : ',this.data,'\n-----------------')
        return this;

    }
    _setFilterData(){
        let output=this.data;
        output=output.filter(row=>{
                let found=false;
        let total_found=0;
        this.contition.forEach(cond=> {
            let dimensions = cond.k.split('.');
        if(!row.hasOwnProperty(dimensions[0]))
            return false;

        let cv=cond.v;
        let rv=null;
        if(dimensions.length==1){
            rv=row[dimensions[0]];
        }
        else if(dimensions.length==2){
            if(!row[dimensions[0]].hasOwnProperty(dimensions[1]))
                return false;
            rv=row[dimensions[0]][dimensions[1]];
        }else if(dimensions.length==3){
            if(!row[dimensions[0]][dimensions[1]].hasOwnProperty(dimensions[2]))
                return false;
            rv=row[dimensions[0]][dimensions[1]][dimensions[2]];
        }else if(dimensions.length==4){
            if(!row[dimensions[0]][dimensions[1]][dimensions[2]].hasOwnProperty(dimensions[3]))
                return false;
            rv=row[dimensions[0]][dimensions[1]][dimensions[2]][dimensions[3]];
        }
        if(rv=='')
            rv='';
        if(cv=='')
            cv='';

        if(cond.oper=='=' || cond.oper=='like'){
            cv=cv.trim().toUpperCase();
            rv=rv.trim().toUpperCase();
        }if(cond.oper=='<' ||cond.oper=='>' || cond.oper=='>=' ||cond.oper=='<='){
            cv=isNaN(parseFloat(cv))?0:parseFloat(cv);
            rv=isNaN(parseFloat(rv))?0:parseFloat(rv);
        }
        if(cond.oper=='=' && cv==rv)
            total_found++;
        else if(cond.oper=='<' && rv<cv)
            total_found++;
        else if(cond.oper=='>' && rv>cv)
            total_found++;
        else if(cond.oper=='>=' && rv>=cv)
            total_found++;
        else if(cond.oper=='<=' && rv<=cv)
            total_found++;
        else if(cond.oper=='like' && rv.search(cv)>=0){
            total_found++;
        }

    });

        return total_found==this.contition.length;
    });
        this.data=output;
      //  console.log('Filter Data',this.data,'\n---------------');
        return this;
    }
    _setCount(field){

    }
    _setSum(field){

    }
    _setMax(field){

    }
    _setMin(field){

    }
    _setAvg(field){

    }
    fetch(){

        this._setFilterData()
            ._setColumns()
            ._setOrderBy();
        return this.data;
    }






    getSum(data,field){
        //data[field].reduce((a, b) => a + b, 0)
    }
}
let objUtil=new USUtil();

console.log(objUtil.getField('max(name) as test'));

/*
let search_data=objUtil.select('name')
    .count('name').count('age')
    .max('age')
    .avg('age')
    .min('age')

    .from(data)
  .where('age','>','20')
     .where('name','like','uday')
    .orderby('name','desc')
    .fetch();
    */
//console.log(search_data);


